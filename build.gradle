/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

plugins {
    id 'java'
    id 'antlr'
}

group = 'me.sunlan'
version = '1.0-SNAPSHOT'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

dependencies {
    antlr "me.sunlan:antlr4:${version_antlr4}"

    testImplementation platform("org.junit:junit-bom:${version_junit}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

def generateGrammarSourceTask = tasks.named("generateGrammarSource") {
    maxHeapSize = '1g'
    outputs.cacheIf { true }
    outputDirectory = layout.buildDirectory.dir("generated/sources/antlr4").get().asFile

    final PARSER_PACKAGE_NAME = 'me.sunlan.opath.parser'
    arguments += ["-no-visitor", "-listener", "-package", PARSER_PACKAGE_NAME]

    doLast {
        def parserFilePattern = 'OPath*'
        def outputPath = generateGrammarSource.outputDirectory.canonicalPath
        def parserPackagePath = "${outputPath}/${PARSER_PACKAGE_NAME.replace('.', '/')}"
        file(parserPackagePath).mkdirs()
        copy {
            from outputPath
            into parserPackagePath
            include parserFilePattern
        }
        delete fileTree(outputPath) {
            include parserFilePattern
        }
    }
}

sourceSets.main.java.srcDir generateGrammarSourceTask

compileJava.dependsOn generateGrammarSource


test {
    useJUnitPlatform()
}
